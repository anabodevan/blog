install.packages("skimr")
install.packages("skimr")
library(skimr)
data()
titanic
titanic
data(titanic)
data(Titanic)
Titanic
data("Titanic")
titanic_df <- as.data.frame(Titanic)
skim(titanic_df)
library(DT)
datatable(titanic_df)
library(skimr)
library(DT)
library(dplyr)
library(tidyr)
library(ggplot2)
data("Titanic")
titanic_df <- as.data.frame(Titanic) %>%
tidyr::uncount(Freq) %>%  # Expand aggregated counts to individual rows
mutate(across(where(is.factor), as.character))  # Convert factors to character for better handling
skim(titanic_df) %>%
partition()  # Split output by variable type
library(skimr)
library(DT)
library(dplyr)
library(tidyr)
library(ggplot2)
data("Titanic")
titanic_df <- as.data.frame(Titanic) %>%
tidyr::uncount(Freq) %>%
mutate(across(where(is.factor), as.character))
skim(titanic_df) %>%
partition()  # Split output by variable type
View(titanic_df)
# Custom skim function with additional statistics
custom_skim <- skim_with(
custom_skim <- skim_with(
custom_skim <- skim_with(
factor = sfl(top_counts = ~paste(names(sort(table(.), decreasing = TRUE)[1:3],
collapse = ", "))))
titanic <- as.data.frame(Titanic) %>%
data("Titanic")
titanic <- as.data.frame(Titanic) %>%
uncount(Freq, .remove = TRUE) %>%
mutate(
Class = factor(Class, levels = c("1st", "2nd", "3rd", "Crew")),
Survived = fct_recode(Survived, "Survived" = "Yes", "Perished" = "No"),
Age = fct_relevel(Age, "Child", "Adult"),
across(c(Class, Sex, Age), ~fct_infreq(.)),  # Order by frequency
PassengerID = row_number()  # Create unique identifier
) %>%
select(PassengerID, everything())
library(tidyverse)
titanic <- as.data.frame(Titanic) %>%
tidyr::uncount(Freq, .remove = TRUE) %>%
mutate(
Class = factor(Class, levels = c("1st", "2nd", "3rd", "Crew")),
Survived = case_when(
Survived == "Yes" ~ "Survived",
Survived == "No" ~ "Perished",
TRUE ~ as.character(Survived)
),
Age = factor(Age, levels = c("Child", "Adult")),
across(c(Class, Sex, Age), ~fct_infreq(.)),
PassengerID = row_number()
) %>%
select(PassengerID, everything())
rm(titanic_df)
glimpse(titanic)
skim(titanic)
skim(titanic)
skim(titanic) %>%
partition()
skim(titanic)
View(titanic)
titanic <- as.data.frame(Titanic)
View(titanic)
Titanic
titanic <- as.data.frame(Titanic)
titanic_d <- Titanic
View(titanic)
as.data.frame(titanic_d)
data("airquality")
head(airquality)
library(skimr)
skim(airquality)
skim(airquality) %>%
dplyr::select(variable, n_missing)
airquality$Ozone[is.na(airquality$Ozone)] <- median(airquality$Ozone, na.rm = TRUE)
View(airquality)
airquality$Ozone[is.na(airquality$Solar.R)] <- median(airquality$Solar.R, na.rm = TRUE)
airquality$Ozone[is.na(airquality$Ozone)] <- median(airquality$Ozone, na.rm = TRUE)
airquality$Solar.R[is.na(airquality$Solar.R)] <- median(airquality$Solar.R, na.rm = TRUE)
View(airquality)
skim(airquality)
library(dplyr)
airquality %>%
dplyr::group_by(Month) %>%
skim()
library(skimr)
skim(airquality)
View(airquality)
skim(airquality)
airquality <- as.data.frame(airquality)
library(dplyr)
airquality %>%
dplyr::group_by(Month) %>%
skim()
airquality %>%
group_by(Month) %>%
skim(Ozone, Solar.R, Wind)  # Newer skimr versions support this syntax
airquality %>%
group_by(Month) %>%
summarise(across(c(Ozone, Solar.R, Wind),
list(mean = ~mean(., na.rm = TRUE),
median = ~median(., na.rm = TRUE))))
library(ggplot2)
ggplot(airquality, aes(x=Solar.R, y=Ozone, color=factor(Month))) +
geom_point() +
geom_smooth(method="lm")
airquality %>%
ggplot(aes(x = Solar.R, y = Ozone, color = factor(Month))) +
geom_point(alpha = 0.7, size = 3) +
geom_smooth(method = "lm", se = FALSE) +
scale_color_brewer(palette = "Dark2", name = "Month")
airquality %>%
ggplot(aes(x = Solar.R, y = Ozone, color = factor(Month))) +
geom_point(alpha = 0.7, size = 1.5) +
geom_smooth(method = "lm", se = FALSE) +
scale_color_brewer(palette = "Dark2", name = "Month")
# robust statistics for skewed data
custom_skim <- skim_with(
numeric = sfl(
median = median,
mad = mad,  # Median Absolute Deviation (robust to outliers)
p25 = ~quantile(., 0.25),
p75 = ~quantile(., 0.75)
),
base = sfl(
n_missing = sum(is.na(.))
)
)
# robust statistics for skewed data
custom_skim <- skim_with(
numeric = sfl(
median = median,
iqr = IQR,
missing = sum(is.na(.)),
hist = NULL  # Remove histograms for brevity
)
)
# robust statistics for skewed data
custom_skim <- skim_with(
numeric = sfl(
median = median,
iqr = IQR,
missing = sum(is.na(.)),
hist = NULL  # Remove histograms for brevity
)
)
custom_skim <- skim_with(
numeric = sfl(
# Central tendency
median = ~median(., na.rm = TRUE),
mean = ~mean(., na.rm = TRUE),
# Spread
mad = ~mad(., na.rm = TRUE),       # Median absolute deviation
iqr = ~IQR(., na.rm = TRUE),       # Interquartile range
# Distribution shape
skew = ~moments::skewness(., na.rm = TRUE),  # >1 means right-skewed
# Range
min = ~min(., na.rm = TRUE),
max = ~max(., na.rm = TRUE)
),
base = sfl(
n_missing = sum(is.na(.)),
complete_rate = ~mean(!is.na(.))   # Percentage of complete cases
)
)
if (!require("moments")) install.packages("moments")
if (!require("moments")) install.packages("moments")
custom_skim <- skim_with(
numeric = sfl(
# Central tendency
median = ~median(., na.rm = TRUE),
mean = ~mean(., na.rm = TRUE),
# Spread
mad = ~mad(., na.rm = TRUE),       # Median absolute deviation
iqr = ~IQR(., na.rm = TRUE),       # Interquartile range
# Distribution shape
skew = ~moments::skewness(., na.rm = TRUE),  # >1 means right-skewed
# Range
min = ~min(., na.rm = TRUE),
max = ~max(., na.rm = TRUE)
),
base = sfl(
n_missing = sum(is.na(.)),
complete_rate = ~mean(!is.na(.))   # Percentage of complete cases
)
custom_skim <- skim_with(
custom_skim <- skim_with(
numeric = sfl(
# Central tendency
median = ~median(., na.rm = TRUE),
mean = ~mean(., na.rm = TRUE),
# Spread
mad = ~mad(., na.rm = TRUE),       # Median absolute deviation
iqr = ~IQR(., na.rm = TRUE),       # Interquartile range
# Distribution shape
skew = ~moments::skewness(., na.rm = TRUE),  # >1 means right-skewed
# Range
min = ~min(., na.rm = TRUE),
max = ~max(., na.rm = TRUE)
),
base = sfl(
n_missing = sum(is.na(.)),
complete_rate = ~mean(!is.na(.))   # Percentage of complete cases
)
)
custom_skim <- skim_with(
numeric = sfl(
# Central tendency
median = function(x) median(x, na.rm = TRUE),
mean = function(x) mean(x, na.rm = TRUE),
# Spread
mad = function(x) mad(x, na.rm = TRUE),
iqr = function(x) IQR(x, na.rm = TRUE),
# Distribution shape
skew = function(x) moments::skewness(x, na.rm = TRUE),
# Range
min = function(x) min(x, na.rm = TRUE),
max = function(x) max(x, na.rm = TRUE)
),
base = sfl(
n_missing = function(x) sum(is.na(x)),
complete_rate = function(x) mean(!is.na(x))
)
)
custom_skim(airquality)
custom_skim(airquality,
select("Ozone", "Solar.R", "Wind"))
airquality %>%
group_by(Month) %>%
custom_skim()
airquality %>%
group_by(Month) %>%
select(Ozone, Solar.R, Wind)
airquality %>%
select(Ozone, Solar.R, Wind)
airquality %>%
group_by(Month) %>%
custom_skim()
custom_skim(airquality$Ozone)
custom_skim(airquality$Ozone)
airquality %>%
group_by(Month) %>%
skim(Ozone, Solar.R, Wind)
ggplot(gather(airquality, key = "variable", value = "value"),
aes(x = value)) +
geom_histogram(bins = 20, fill = "steelblue") +
facet_wrap(~variable, scales = "free") +
labs(title = "Distribution of All Variables in airquality Dataset",
subtitle = "Note different scales for each variable")
ggplot(airquality, aes(x = factor(Month), y = Ozone, fill = factor(Month))) +
geom_boxplot() +
scale_fill_brewer(palette = "Dark2") +
labs(title = "Ozone Concentration by Month",
subtitle = "Higher pollution in summer months (July-August)",
x = "Month",
fill = "Month")
ggplot(airquality, aes(x = factor(Month), y = Ozone, fill = factor(Month))) +
geom_boxplot() +
scale_fill_brewer(palette = "Dark2") +
labs(title = "Ozone Concentration by Month",
subtitle = "Higher pollution in summer months (July-August)",
x = "Month",
fill = "Month")
ggplot(airquality, aes(x = factor(Month), y = Ozone, fill = factor(Month))) +
geom_boxplot() +
scale_fill_brewer(palette = "Dark2") +
labs(title = "Ozone Concentration by Month",
subtitle = "Higher pollution in summer months (July-August)",
x = "Month",
fill = "Month")
ggplot(airquality, aes(x = factor(Month), y = Solar.R, fill = factor(Month))) +
geom_boxplot() +
scale_fill_brewer(palette = "Pastel1") +
labs(title = "Solar Radiation by Month",
subtitle = "Notice dip in August radiation",
x = "Month")
ggplot(airquality, aes(x = factor(Month), y = Solar.R, fill = factor(Month))) +
geom_boxplot() +
scale_fill_brewer(palette = "Dark2") +
labs(title = "Solar Radiation by Month",
subtitle = "Notice dip in August radiation",
x = "Month")
library(ggplot2)
quarto publish
quit()
library(readr)
read_csv("sardinella.csv")
read_csv("sardinella.csv")
mtcars
mtcars
data <- mtcars
data
library(dplyr)
data %>% slice(2:4, 9)
data %>% filter(mpg >= 21, wt>4)
data %>% filter(mpg >= 20, wt>4)
data %>% filter(mpg > 20, wt>4)
data %>% filter(mpg > 20, wt>4.00
)
data %>% filter(mpg > 20)
data %>% filter(mpg>20, am == 0)
data %>% select(mpg, am)
data %>% select(-qsec)
data %>% select(mpg, am) %>%
filter(am == 0)# selecting only mpg and transmission type
View(data)
data %>% rename(vs = Engine)
data %>% rename(Engine = vs )
data %>% rename(Engine = vs,
Transmission = am) # new name = old name
data %>% rename(Engine = vs,
Transmission = am) # new name = old name
View(data)
View(data)
data %>% rename(Engine = vs,
Transmission = am) # new name = old name
data %>% mutate(am = ifelse(am == "0", yes = "automatic", no = "manual"))
data %>% arrange(desc(mpg))
data %>% group_by(am, gear)
data %>% summarise(median(mpg))
data <- data %>%
# assigns names to binary values
mutate(am = ifelse(am == "0",
yes = "automatic", no = "manual")) %>%
mutate(vs = ifelse(vs == "0",
yes = "v-shaped", no = "straight")) %>%
# rename columns to make them more comprehensible
rename(Engine = vs,
Transmission = am)
View(data)
quit()
